version: 2

aliases:
  # -------------------------
  #      ALIASES: Caches
  # -------------------------
  - &restore-deps-cache-rust
    key: deps-cache-{{ arch }}-{{ checksum "Cargo.toml" }}

  - &save-deps-cache-rust
    key: deps-cache-{{ arch }}-{{ checksum "Cargo.toml" }}
    paths:
      - /usr/local/cargo/registry
      - ~/project/target/

  - &restore-deps-cache-rustup
    key: deps-cache-musl-{{ arch }}-{{ checksum "Cargo.toml" }}

  - &save-deps-cache-rustup
    key: deps-cache-musl-{{ arch }}-{{ checksum "Cargo.toml" }}
    paths:
      - ~/.rustup/
      - ~/.cargo/
      - ~/project/target/
  # -------------------------
  #  ALIASES: Branch Filters
  # -------------------------
  - &filter-only-master
    branches:
      only: master
  - &filter-only-semantic-pr
    branches:
      only:  /^(pull|fix|feat)\/.*$/
  # -------------------------
  # ALIASES: Get latest usable nightly from rustup-components-history
  - &get-latest-toolchain
    name: Get latest Nightly version that has Clippy component
    command: |
      export TOOLCHAIN="nightly-$(curl https://rust-lang.github.io/rustup-components-history/x86_64-unknown-linux-gnu/clippy)"
      echo "export TOOLCHAIN=$TOOLCHAIN" >> $BASH_ENV
      source $BASH_ENV
      echo Would use toolchain $TOOLCHAIN


defaults: &defaults
  working_directory: ~/project
  environment:
    RUST_BACKTRACE: 1

jobs:
  build:
    <<: *defaults
    docker:
      - image: rust:latest
    steps:
      - checkout
      - run: apt update && apt install -y cmake
      - restore_cache: *restore-deps-cache-rust
      - run: cargo build
      - save_cache: *save-deps-cache-rust

  test-linux:
    <<: *defaults
    docker:
      - image: rust:latest
    steps:
      - checkout
      - restore_cache: *restore-deps-cache-rust
      - run: apt update && apt install -y cmake
      - run: *get-latest-toolchain
      - run: rustup toolchain install $TOOLCHAIN
      - run: rustup toolchain install stable
      - run: rustup component add clippy --toolchain $TOOLCHAIN
      - run: rustup component add rustfmt --toolchain stable
      - run: cargo +$TOOLCHAIN test --all
      - save_cache: *save-deps-cache-rust
      - run: cargo +$TOOLCHAIN clippy
      - run: cargo +stable fmt -- --check

  build-linux:
    <<: *defaults
    docker:
      - image: clux/muslrust
    steps:
      - checkout
      - restore_cache: *restore-deps-cache-rustup
      - run: cargo build --release
      - save_cache: *save-deps-cache-rustup
      - run: mkdir bin/
      - run: mv target/x86_64-unknown-linux-musl/release/semantic-rs ./bin/semantic-rs-linux
      - persist_to_workspace:
          root: .
          paths:
            - bin/*

  test-macos:
    <<: *defaults
    macos:
      xcode: "10.2.1"
    steps:
      - checkout
      - restore_cache: *restore-deps-cache-rustup
      - run: curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain nightly -y
      - run: source $HOME/.cargo/env && cargo test --all
      - save_cache: *save-deps-cache-rustup

  build-macos:
    <<: *defaults
    macos:
      xcode: "10.2.1"
    steps:
      - checkout
      - restore_cache: *restore-deps-cache-rustup
      - run: curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain nightly -y
      - run: source $HOME/.cargo/env && cargo build --release
      - save_cache: *save-deps-cache-rustup
      - run: mkdir bin/
      - run: mv target/release/semantic-rs ./bin/semantic-rs-macos
      - persist_to_workspace:
          root: .
          paths:
            - bin/*

  release-dry:
    <<: *defaults
    docker:
      - image: rust:latest
    steps:
      - checkout
      - attach_workspace:
          at: /workspace
      - run: /workspace/bin/semantic-rs-linux --dry

  release:
    <<: *defaults
    docker:
      - image: rust:latest
    steps:
      - checkout
      - attach_workspace:
          at: /workspace
      - restore_cache: *restore-deps-cache-rust
      # This unset is VERY important: without it --force-https cannot work
      # For some reason CircleCI has a global override substituting git@ links instead of all https links
      - run: git config --global --unset url.ssh://git@github.com.insteadof
      - run: /workspace/bin/semantic-rs-linux
      - save_cache: *save-deps-cache-rust

workflows:
  version: 2
  analysis:
    jobs:
      - test-linux:
          filters: *filter-only-semantic-pr
      - test-macos:
          filters: *filter-only-semantic-pr
      - build-linux:
          filters: *filter-only-semantic-pr
      - build-macos:
          filters: *filter-only-semantic-pr
      - release-dry:
          filters: *filter-only-semantic-pr
          requires:
            - build-linux
            - build-macos

  release:
    jobs:
      - test-linux:
          filters: *filter-only-master
      - test-macos:
          filters: *filter-only-master
      - build-linux:
          filters: *filter-only-master
      - build-macos:
          filters: *filter-only-master
      - release-dry:
          filters: *filter-only-master
          requires:
            - build-linux
            - build-macos
      - hold:
          filters: *filter-only-master
          type: approval
          requires:
            - test-linux
            - test-macos
            - release-dry
      - release:
          filters: *filter-only-master
          requires:
            - hold
